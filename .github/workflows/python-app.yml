# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    branches: [ "master" ]
    tags:
        - 'v*'

  pull_request:
    branches: [ "master" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}


permissions:
  contents: read

jobs:
  test:
    name: ‚úÖ Test with pytest
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.8
      uses: actions/setup-python@v3
      with:
        python-version: "3.8.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      env:
        ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }}
        ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
      run: |
        # app module seems not to be used, whereas it is defined
        # in pyproject.toml, works  locally but not in githubaction.
        # Add the module directly in the python path ...
        export PYTHONPATH=$PYTHONPATH:$PWD/app
        mv .env.sample .env
        # Export all variables
        source .env
        export $(cut -d= -f1 .env)
        # Export secret
        pytest tests

  deploy:
    name: üêã Save docker image
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    if: github.ref == 'refs/heads/master'
    #if: github.ref_type == 'tag' && github.ref == 'refs/heads/master'
    steps:
      -
        uses: actions/checkout@v3
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to grcio
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=auto
          tags: |
            type=schedule
            # branch event
            type=ref,enable=true,priority=600,prefix=,suffix=,event=branch
            # tag event
            # type=ref,enable=true,priority=600,prefix=,suffix=,event=tag
            # pull request event
            type=ref,enable=true,priority=600,prefix=pr-,suffix=,event=pr
            # push tag version of tagged branch
            type=semver,pattern={{version}},event=tag
            # set latest tag for master branch
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'master') }}
      -
        name: Build and Push (latest)
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            APP_VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
